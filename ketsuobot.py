import telebot
import webbrowser
# from telebot import types
import sqlite3
bot = telebot.TeleBot('7650145975:AAEZSo4RVCmSwZaoIK9sCTWeXDQ4pdbAfac')
name = None
@bot.message_handler(commands=['site', 'website'])
def site(message):
    webbrowser.open('https://i.postimg.cc/8cYGJr95/image.jpg')


@bot.message_handler(commands=['start'])
def main(message):
    conn = sqlite3.connect('forfun.db')
    sql = conn.cursor()

    sql.execute(
        'CREATE TABLE IF NOT EXISTS users(id int auto_increment primary key, name varchar(50), pass varchar(50))')
    conn.commit()
    sql.close()
    conn.close()
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º')
    bot.register_next_step_handler(message, user_name)

def user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∏–º—è')
    bot.register_next_step_handler(message, user_pass)


def user_pass(message):
    password = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if len(password) < 6:
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
        return
    if not any(char.isdigit() for char in password):
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
        return
    if not any(char.isupper() for char in password):
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
        return

    bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...')

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('forfun.db')
    sql = conn.cursor()

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        sql.execute(
            f'INSERT INTO users VALUES (?, ?)', (name, password)
        )
        conn.commit()
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
    finally:
        sql.close()
        conn.close()

    # bot.register_next_step_handler(message, user_pass)

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç, –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ start –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è —Ñ–æ—Ç–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏
# def start(message):
#     markup = types.ReplyKeyboardMarkup()
#     btn1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
#     markup.row(btn1)
#     btn2 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ')
#     btn3 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
#     markup.row(btn2, btn3)
#     file = open('./bleach.jpg', 'rb')
#     bot.send_photo(message.chat.id, file, reply_markup=markup)
#     bot.register_next_step_handler(message, on_click)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
# def on_click(message):
#     if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
#         bot.send_message(message.chat.id, 'Smth is open')
#     elif message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
#         bot.send_message(message.chat.id, 'Smth is deleted')
#     elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç':
#         bot.send_message(message.chat.id, 'Smth is edited')
#     else:
#         bot.send_message(message.chat.id, 'Unknown')

# –§—É–Ω–∫—Ü–∏—è help
# @bot.message_handler(commands=['help'])
# def help(message):
#     bot.send_message(message.chat.id, '<b>Help</b> <em><u>information</u></em>', parse_mode='html')

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –±–æ—Ç—É
# @bot.message_handler(content_types=['photo'])
# def get_photo(message):
#     markup = types.InlineKeyboardMarkup()
#     btn1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://www.google.com/')
#     markup.row(btn1)
#     btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='delete')
#     btn3 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit')
#     markup.row(btn2, btn3)
#     bot.reply_to(message, '–ö–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!üòç', reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–º—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–∫–∏
# @bot.callback_query_handler(func=lambda callback: True)
# def callback_message(callback):
#     if callback.data == 'delete':
#         bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
#     elif callback.data == 'edit':
#         bot.edit_message_text('Edit text', callback.message.chat.id, callback.message.message_id)

# –ø—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
# @bot.message_handler()
# def info(message):
#     if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
#         bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, @{message.chat.username}')
#     elif message.text.lower() == 'id':
#         bot.reply_to(message, f'ID: {message.from_user.id}')
#
#


















bot.polling(non_stop=True)