import json
from http.client import responses

import telebot
import  requests
# import webbrowser
# from telebot import types
# import sqlite3
bot = telebot.TeleBot('TOKEN_NAME')
APIweather = 'TOKEN_NAME'
# name = None

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥')

@bot.message_handler(content_types=['text'])
def get_weather(message):
    city = message.text.strip().lower()
    response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={APIweather}&units=metric&lang=ru')
    if response.status_code == 200:
        data = response.json()
        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        bot.reply_to(message, f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()}\n'
                              f'–ü–æ–≥–æ–¥–∞ {weather}\n'
                              f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞–≤–Ω–∞ {temp}, –ø–æ –æ—â—É—â–µ–Ω–∏—è–º {feels_like}¬∞C')

        image = 'sunny.jpeg' if weather > str(5.0) else 'notsunny.png'
        file = open('./' + image, 'rb')
        bot.send_photo(message.chat.id, file)
    else:
        bot.reply_to(message, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')




# @bot.message_handler(commands=['site', 'website'])
# def site(message):
#     webbrowser.open('https://i.postimg.cc/8cYGJr95/image.jpg')
#
#
# @bot.message_handler(commands=['bleach'])
# # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç, –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ start –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è —Ñ–æ—Ç–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏
# def bleach(message):
#     markup = types.ReplyKeyboardMarkup()
#     btn1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
#     markup.row(btn1)
#     btn2 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ')
#     btn3 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
#     markup.row(btn2, btn3)
#     file = open('./bleach.jpg', 'rb')
#     bot.send_photo(message.chat.id, file, reply_markup=markup)
#     bot.register_next_step_handler(message, on_click)
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
# def on_click(message):
#     if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
#         bot.send_message(message.chat.id, 'Smth is open')
#     elif message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
#         bot.send_message(message.chat.id, 'Smth is deleted')
#     elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç':
#         bot.send_message(message.chat.id, 'Smth is edited')
#     else:
#         bot.send_message(message.chat.id, 'Unknown')
#
# # –§—É–Ω–∫—Ü–∏—è help
# @bot.message_handler(commands=['help'])
# def help(message):
#     bot.send_message(message.chat.id, '<b>Help</b> <em><u>information</u></em>', parse_mode='html')
#
# # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –±–æ—Ç—É
# @bot.message_handler(content_types=['photo'])
# def get_photo(message):
#     markup = types.InlineKeyboardMarkup()
#     btn1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://www.google.com/')
#     markup.row(btn1)
#     btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='delete')
#     btn3 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit')
#     markup.row(btn2, btn3)
#     bot.reply_to(message, '–ö–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!üòç', reply_markup=markup)
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–º—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–∫–∏
# @bot.callback_query_handler(func=lambda callback: True)
# def callback_message(callback):
#     if callback.data == 'delete':
#         bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
#     elif callback.data == 'edit':
#         bot.edit_message_text('Edit text', callback.message.chat.id, callback.message.message_id)

# def main(message):
#     file = open('./bleach.jpg', 'rb')
#     bot.send_photo(message.chat.id, file)
#     # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#     conn = sqlite3.connect('forfun.db')
#     sql = conn.cursor()
#     sql.execute('''
#         CREATE TABLE IF NOT EXISTS users (
#             id INTEGER PRIMARY KEY AUTOINCREMENT,
#             name TEXT NOT NULL,
#             pass TEXT NOT NULL
#         )
#     ''')
#     conn.commit()
#     sql.close()
#     conn.close()
#
#     bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º. –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:')
#     bot.register_next_step_handler(message, user_name)
#
#
# def user_name(message):
#     name = message.text.strip()
#     if not name:
#         bot.send_message(message.chat.id, '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
#         bot.register_next_step_handler(message, user_name)
#         return
#
#     bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:')
#     bot.register_next_step_handler(message, user_pass, name)
#
#
# def user_pass(message, name):
#     password = message.text.strip()
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
#     if len(password) < 6:
#         bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
#         bot.register_next_step_handler(message, user_pass, name)
#         return
#     if not any(char.isdigit() for char in password):
#         bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
#         bot.register_next_step_handler(message, user_pass, name)
#         return
#     if not any(char.isupper() for char in password):
#         bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')
#         bot.register_next_step_handler(message, user_pass, name)
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
#     conn = sqlite3.connect('forfun.db')
#     sql = conn.cursor()
#     try:
#         sql.execute('INSERT INTO users (name, pass) VALUES (?, ?)', (name, password))
#         conn.commit()
#
#         # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
#         markup = telebot.types.InlineKeyboardMarkup()
#         markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
#
#         bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', reply_markup=markup)
#     except sqlite3.Error as e:
#         bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
#     finally:
#         sql.close()
#         conn.close()
#
#
# @bot.callback_query_handler(func=lambda call: call.data == 'users')
# def list_users(call):
#     # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     conn = sqlite3.connect('forfun.db')
#     sql = conn.cursor()
#     try:
#         sql.execute('SELECT name FROM users')
#         users = sql.fetchall()
#         if users:
#             user_list = '\n'.join(user[0] for user in users)
#             bot.send_message(call.message.chat.id, f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}')
#         else:
#             bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.')
#     except sqlite3.Error as e:
#         bot.send_message(call.message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')
#     finally:
#         sql.close()
#         conn.close()


bot.polling(non_stop=True)
